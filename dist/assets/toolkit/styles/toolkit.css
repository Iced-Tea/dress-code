/**
 * Toolkit styles
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.container {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  .container:after {
    content: " ";
    display: block;
    clear: both; }

.container--padded {
  padding: 0 1.5rem; }
  @media (min-width: 37.5em) {
    .container--padded {
      padding: 0 convert-length(80px, em, 14px); } }

.cf:before,
.btn-group:before,
.cf:after, .btn-group:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */ }

.cf:after, .btn-group:after {
  clear: both; }

.cf, .btn-group {
  *zoom: 1;
  /* 3 */ }

.nav {
  list-style-type: none;
  margin-left: 0; }
  .nav li {
    display: inline; }
  .nav a {
    display: inline-block; }

.media {
  margin: 0; }
  .media
.media__bd {
    overflow: hidden;
    _overflow: visible;
    zoom: 1; }
  .media
.media__img {
    float: left;
    margin-right:  12px;
    margin-right:  1.2rem; }
    .media
.media__img
img {
      display: block; }
  .media
.media__img--rev {
    float: right;
    margin-left:  12px;
    margin-left:  1.2rem; }

.is-collapsed {
  height: 0 !important; }

.is-expanded {
  height: auto !important; }

.is-hidden {
  display: none !important; }

.is-shown {
  display: block !important; }

.is-invisible {
  opacity: 0; }

.is-visible {
  opacity: 1; }

.is-inline {
  display: inline-block !important; }

.is-fixed {
  position: fixed !important; }

.is-important {
  background: #ffef6a !important; }

.less-important {
  color: #b6b6b6 !important; }

.text-left {
  text-align: left; }

.text-center {
  text-align: center; }

.text-right {
  text-align: right; }

.collapse-bd {
  height: 0;
  overflow: hidden; }

.csstransitions .collapsing {
  -webkit-transition: height 0.3s ease-out;
          transition: height 0.3s ease-out; }

.space-lover {
  margin-bottom:  24px !important;
  margin-bottom:  2.4rem !important; }

.space-lover--huge {
  margin-bottom:  48px !important;
  margin-bottom:  4.8rem !important; }

.island {
  padding:  4px !important;
  padding:  0.4rem !important; }

.island--far-away {
  padding:  12px !important;
  padding:  1.2rem !important; }

* {
  box-sizing: border-box; }

h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dd,
p, figure, object,
pre, table, fieldset, hr {
  margin: 0;
  margin-bottom:  24px;
  margin-bottom:  2.4rem; }

html {
  height: 100%;
  font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-size: 62.5%;
  line-height: 1;
  font-weight: 300; }

body {
  font-size:  14px;
  font-size:  1.4rem;
  line-height:  24px;
  line-height:  2.4rem;
  background: #edeced;
  color: #4a4a4a; }

pre {
  word-wrap: normal; }

::-webkit-selection {
  background-color: #ff8e25;
  color: #fff; }

::-moz-selection {
  background-color: #ff8e25;
  color: #fff; }

::selection {
  background-color: #ff8e25;
  color: #fff; }

strong {
  font-weight: 500; }

em {
  font-style: italic; }

.nowrap {
  white-space: nowrap; }

.styleguide p {
  max-width:  450px;
  max-width:  45rem; }

a {
  text-decoration: none;
  color: #26aafe;
  cursor: pointer;
  -webkit-transition: color 0.1s linear;
          transition: color 0.1s linear;
  -webkit-tap-highlight-color: transparent; }

input {
  -webkit-tap-highlight-color: transparent; }

.no-touch a:hover,
.touch a:active {
  text-decoration: none;
  color: #1e87cb; }

.no-touch .link--success:hover,
.touch .link--success:active {
  color: #65cb1c; }

.no-touch .link--destroy:hover,
.touch .link--destroy:active {
  color: #ff4a25; }

.link--disabled,
.touch .link--disabled:active,
.no-touch .link--disabled:hover {
  color: #b6b6b6;
  cursor: default; }

ul, ol {
  padding: 0;
  list-style-type: none; }

dt {
  font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif; }

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  margin-bottom:  24px;
  margin-bottom:  2.4rem;
  font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-weight: 300;
  color: #4a4a4a; }
  h1
small
, h2
small
, h3
small
, h4
small
, h5
small
, h6
small
,
  .h1
small
, .h2
small
, .h3
small
, .h4
small
, .h5
small
, .h6
small
{
    display: block;
    font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
    font-size: 60%;
    color: #b6b6b6; }

h1, .h1 {
  font-size:  34px;
  font-size:  3.4rem;
  line-height:  48px;
  line-height:  4.8rem; }

h2, .h2 {
  font-size:  27px;
  font-size:  2.7rem;
  line-height:  36px;
  line-height:  3.6rem; }

h3, .h3 {
  font-size:  22px;
  font-size:  2.2rem;
  line-height:  36px;
  line-height:  3.6rem; }

h4, .h4 {
  font-size:  18px;
  font-size:  1.8rem;
  line-height:  24px;
  line-height:  2.4rem; }

.text--center {
  text-align: center; }

.text--small {
  font-size:  11px;
  font-size:  1.1rem;
  line-height:  18px;
  line-height:  1.8rem; }

.less-important {
  font-size:  11px;
  font-size:  1.1rem;
  line-height: 1;
  color: #d1d1d1; }

.text--error {
  color: #ff4a25; }

.icon {
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  -webkit-transform-origin: 50%;
      -ms-transform-origin: 50%;
          transform-origin: 50%; }
  .icon:hover
[stroke^='#'] {
    stroke: #186698; }
  .icon:hover
[fill^='#'] {
    fill: #186698; }
  .icon:active {
    -webkit-transform: scale(0.85);
        -ms-transform: scale(0.85);
            transform: scale(0.85); }

.icon--destroy:hover
[stroke^='#'] {
  stroke: #ff4a25; }

.icon--destroy:hover
[fill^='#'] {
  fill: #ff4a25; }

body:not(.is-admin) .icon--is-admin-only,
body:not(.is-admin) .icon--is-admin-only:hover,
body:not(.is-admin) .icon--is-admin-only:active,
.icon--disabled,
.icon--disabled:hover,
.icon--disabled:active {
  -webkit-transform: none;
      -ms-transform: none;
          transform: none; }
  body:not(.is-admin) .icon--is-admin-only
[stroke^='#']
,
  body:not(.is-admin) .icon--is-admin-only:hover
[stroke^='#']
,
  body:not(.is-admin) .icon--is-admin-only:active
[stroke^='#']
,
  .icon--disabled
[stroke^='#']
,
  .icon--disabled:hover
[stroke^='#']
,
  .icon--disabled:active
[stroke^='#'] {
    stroke: #d1d1d1; }
  body:not(.is-admin) .icon--is-admin-only
[fill^='#']
,
  body:not(.is-admin) .icon--is-admin-only:hover
[fill^='#']
,
  body:not(.is-admin) .icon--is-admin-only:active
[fill^='#']
,
  .icon--disabled
[fill^='#']
,
  .icon--disabled:hover
[fill^='#']
,
  .icon--disabled:active
[fill^='#'] {
    fill: #d1d1d1; }

:checked + .table__actions-label
[fill^='#'] {
  fill: #186698; }

.is-admin .icon--lock {
  display: none; }

img, object {
  max-width: 100%; }

.btn,
button {
  display: inline-block;
  margin-bottom:  12px;
  margin-bottom:  1.2rem;
  padding:  11px 12px;
  padding:  1.1rem 1.2rem;
  line-height:  12px;
  line-height:  1.2rem;
  background: -webkit-linear-gradient(#fff, #ededed);
  background: linear-gradient(#fff, #ededed);
  border: 1px solid #b6b6b6;
  border-radius: 2px;
  text-transform: capitalize;
  text-decoration: none;
  text-align: center;
  color: #4a4a4a;
  box-shadow: 0 1px 1px transparent;
  cursor: default;
  -webkit-transition: box-shadow 0.2s linear, border-color 0.2s linear;
          transition: box-shadow 0.2s linear, border-color 0.2s linear; }
  .btn:focus
,
  button:focus {
    outline: 0; }

.no-touch .btn:hover,
.no-touch button:hover {
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
  background: -webkit-linear-gradient(#fff, #f2f2f2);
  background: linear-gradient(#fff, #f2f2f2);
  color: #4a4a4a;
  text-decoration: none;
  outline: 0; }

.touch .btn:active,
.no-touch .btn:active,
.touch button:active,
.no-touch button:active {
  background: whitesmoke;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);
  color: #4a4a4a;
  text-decoration: none; }

.btn--icon {
  padding: 0;
  width:  36px;
  width:  3.6rem;
  height:  36px;
  height:  3.6rem; }
  .btn--icon
svg {
    position: relative;
    top: -1px;
    left: -1px; }
  .btn--icon
[stroke^='#'] {
    stroke: #4a4a4a; }
  .btn--icon
[fill^='#'] {
    fill: #4a4a4a; }
  .btn--icon.btn--primary
[stroke^='#'] {
    stroke: #fff; }
  .btn--icon.btn--primary
[fill^='#'] {
    fill: #fff; }
  .btn--icon.btn--destroy:hover
[stroke^='#'] {
    stroke: #fff; }
  .btn--icon.btn--destroy:hover
[fill^='#'] {
    fill: #fff; }
  .btn--icon.btn--disabled
[stroke^='#'] {
    stroke: #b6b6b6; }
  .btn--icon.btn--disabled
[fill^='#'] {
    fill: #b6b6b6; }

.btn--primary {
  background: -webkit-linear-gradient(#26aafe, #029cfe);
  background: linear-gradient(#26aafe, #029cfe);
  border-color: #029cfe;
  color: #fff; }

.touch .btn--primary:active,
.no-touch .btn--primary:hover {
  background: #35b0fe;
  color: #fff; }

.btn--destroy {
  -webkit-transition: box-shadow 0.2s linear;
          transition: box-shadow 0.2s linear; }

.touch .btn--destroy:active,
.no-touch .btn--destroy:hover {
  color: #fff;
  background: #ff6e4f;
  border-color: #ff4a25; }

.btn--disabled,
.touch .btn--disabled:active,
.no-touch .btn--disabled:hover {
  color: #b6b6b6;
  background: transparent;
  border-color: #d1d1d1;
  box-shadow: none; }

.btn-group .btn,
.btn-group
button {
  float: left;
  border-radius: 0;
  border-left: 0 none; }
  .btn-group .btn:first-child
,
  .btn-group
button:first-child {
    border-radius: 2px 0 0 2px;
    border-left: 1px solid #b6b6b6; }
  .btn-group .btn:last-child
,
  .btn-group
button:last-child {
    border-radius: 0 2px 2px 0; }

.btn-group
.btn--primary:first-child {
  border-left: 1px solid #029cfe; }

.btn--create-page {
  display: none; }
  @media (min-width: 64em) {
    .btn--create-page {
      display: inline-block; } }

.btn--small {
  padding:  4px 8px;
  padding:  0.4rem 0.8rem;
  font-size:  11px;
  font-size:  1.1rem;
  text-transform: uppercase; }

.btn--inline {
  margin-bottom: 0; }
  .btn--inline
+ .btn--inline {
    margin-left:  2px;
    margin-left:  0.2rem; }

/*# sourceMappingURL=data:application/json;base64, */