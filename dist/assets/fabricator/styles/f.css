/**
 * Fabricator styles
 * @author Luke Askew
 * Class selectors are namespaced with "f-"
 */
/**
 * Github-like theme for Prism.js
 * @author Luke Askew http://github.com/lukeaskew
 */
code,
code[class*='language-'],
pre[class*='language-'] {
  color: #333;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  -moz-tab-size: 4;
    -o-tab-size: 4;
       tab-size: 4;
  -webkit-hyphens: none;
     -moz-hyphens: none;
      -ms-hyphens: none;
          hyphens: none;
  font-family: 'Ubuntu Mono', Menlo, Courier, monospace;
  line-height: 1.4;
  direction: ltr;
  cursor: text;
  letter-spacing: normal; }

pre[class*='language-'] {
  overflow: auto;
  margin: 1em 0;
  padding: 1.2em;
  border-radius: 3px; }

p code,
li code,
table code {
  margin: 0;
  border-radius: 3px;
  padding: 0.2em 0; }
  p code:before,
  p code:after,
  li code:before,
  li code:after,
  table code:before,
  table code:after {
    letter-spacing: -0.2em;
    content: '\00a0'; }

code,
:not(pre) > code[class*='language-'],
pre[class*='language-'] {
  background: #f7f7f7; }

:not(pre) > code[class*='language-'] {
  padding: 0.1em;
  border-radius: 0.3em; }

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #969896; }

.token.punctuation,
.token.string,
.token.atrule,
.token.attr-value {
  color: #183691; }

.token.property,
.token.tag {
  color: #63a35c; }

.token.boolean,
.token.number {
  color: #0086b3; }

.token.selector,
.token.attr-name,
.token.attr-value .punctuation:first-child,
.token.keyword,
.token.regex,
.token.important {
  color: #a71d5d; }

.token.operator,
.token.entity,
.token.url,
.language-css .token.string {
  color: #a71d5d; }

.token.entity {
  cursor: help; }

.namespace {
  opacity: 0.7; }

.f-color-chips {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap; }

.f-color-chip {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
  -webkit-flex-shrink: 0;
      -ms-flex-negative: 0;
          flex-shrink: 0;
  -webkit-flex-basis: 100%;
      -ms-flex-preferred-size: 100%;
          flex-basis: 100%;
  border-top-width: 8em;
  border-top-style: solid;
  border-bottom-width: 0;
  border-bottom-style: solid;
  background-color: #fff;
  font-weight: 700;
  font-size: 0.75em;
  padding: 1em;
  margin-bottom: 2em; }
  @media (min-width: 60em) {
    .f-color-chip {
      -webkit-flex-basis: 13em;
          -ms-flex-preferred-size: 13em;
              flex-basis: 13em; } }
  .f-color-chip .f-color-chip__color {
    background-color: #fff;
    content: attr(data-color);
    font-weight: 400; }

.f-controls {
  box-sizing: border-box; }
  .f-controls:after {
    clear: both; }
  .f-controls:before,
  .f-controls:after {
    display: table;
    content: ' '; }
  .f-controls .f-control {
    display: block;
    float: left;
    text-align: center;
    width: 33.33333%;
    margin: 0;
    padding: 1rem 0; }
    .f-controls .f-control.f-active {
      box-shadow: inset 0 3px 0 0 #757575; }
      .f-controls .f-control.f-active use {
        fill: #757575; }
    .f-controls .f-control svg {
      vertical-align: middle; }
      .f-controls .f-control svg use {
        fill: #cccccc; }

.f-control {
  box-sizing: border-box;
  display: inline-block;
  cursor: pointer;
  margin-left: 0.618rem; }
  .f-control:first-child {
    margin-left: 0; }
  .f-control svg {
    width: 14px;
    height: 14px; }
    .f-control svg use {
      fill: #cccccc; }

.f-control-bar {
  padding: 1rem 0; }
  .f-control-bar:after {
    clear: both; }
  .f-control-bar:before,
  .f-control-bar:after {
    display: table;
    content: ' '; }

.f-menu-toggle {
  cursor: pointer;
  vertical-align: middle; }
  .f-menu-toggle svg {
    display: block;
    float: left;
    margin-bottom: -1px; }

.f-item-group {
  margin-top: 3rem;
  margin-bottom: 3rem;
  padding-bottom: 3rem;
  border-bottom: 1px solid #cccccc; }
  .f-item-group:after {
    clear: both; }
  .f-item-group:before,
  .f-item-group:after {
    display: table;
    content: ' '; }
  .f-item-group:last-child {
    border-bottom: 0;
    margin-bottom: 0; }
  .f-item-group ~ .f-item-group {
    margin-top: 0; }
  .f-item-group > .f-item-group {
    padding-bottom: 1.5rem;
    margin-bottom: 1.5rem;
    border-bottom: 0; }
    .f-item-group > .f-item-group:first-of-type {
      margin-top: 0; }
    .f-item-group > .f-item-group:last-child {
      margin-bottom: 0;
      padding-bottom: 0; }

.f-item-code {
  margin-top: 2rem; }

.f-item-preview:after {
  clear: both; }

.f-item-preview:before,
.f-item-preview:after {
  display: table;
  content: ' '; }

.f-item-border-bottom {
  border-bottom: 1px solid #cccccc; }

.f-item-heading-group {
  margin-bottom: 2rem;
  vertical-align: middle; }
  .f-item-heading-group:after {
    clear: both; }
  .f-item-heading-group:before,
  .f-item-heading-group:after {
    display: table;
    content: ' '; }

.f-item-heading {
  margin-top: 0;
  margin-bottom: 0;
  display: inline-block;
  vertical-align: middle;
  line-height: 1; }

.f-item-controls {
  display: inline-block;
  vertical-align: middle;
  margin-left: 0.5rem; }
  .f-item-controls .f-control {
    width: 14px;
    height: 14px;
    display: block;
    float: left; }
    .f-item-controls .f-control:hover use {
      fill: #757575; }
    .f-item-controls .f-control use {
      fill: #cccccc; }

.f-item-hidden {
  display: none; }

.f-item-notes {
  font-size: 0.875rem; }

html {
  height: 100%; }
  html.f-menu-active {
    overflow: hidden; }
    @media (min-width: 60em) {
      html.f-menu-active {
        overflow: auto; } }

body {
  margin: 0;
  position: relative; }
  .f-menu-active body {
    width: 100%;
    height: 100%;
    overflow: hidden; }
    @media (min-width: 60em) {
      .f-menu-active body {
        overflow: auto; } }

.f-container {
  box-sizing: border-box;
  position: relative;
  padding: 0 1em;
  z-index: 0;
  min-height: 100vh; }
  .f-container:after {
    clear: both; }
  .f-container:before,
  .f-container:after {
    display: table;
    content: ' '; }
  .f-menu-active .f-container {
    -webkit-transform: translate(14rem, 0);
        -ms-transform: translate(14rem, 0);
            transform: translate(14rem, 0); }
    @media (min-width: 60em) {
      .f-menu-active .f-container {
        margin-left: 14rem;
        -webkit-transform: translate(0, 0);
            -ms-transform: translate(0, 0);
                transform: translate(0, 0); } }

.f-menu {
  box-sizing: border-box;
  position: fixed;
  top: 0;
  left: 0;
  -webkit-transform: translate(-14rem, 0);
      -ms-transform: translate(-14rem, 0);
          transform: translate(-14rem, 0);
  width: 14rem;
  height: 100%;
  z-index: 1;
  background-color: white;
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch; }
  .f-menu-active .f-menu {
    -webkit-transform: translate(0, 0);
        -ms-transform: translate(0, 0);
            transform: translate(0, 0); }
  .f-menu ul {
    margin-top: 0;
    margin-bottom: 0;
    padding-left: 0; }
  .f-menu > ul {
    margin-top: 0;
    margin-bottom: 1rem; }
    .f-menu > ul > li {
      margin-top: 1rem; }
  .f-menu li {
    list-style-type: none;
    margin-top: 0;
    margin-bottom: 0; }
  .f-menu a {
    display: block;
    padding: 0.5rem 2rem;
    color: #757575 !important;
    text-decoration: none;
    font-size: 0.75rem;
    line-height: 1; }
    .f-menu a:hover {
      color: #757575 !important;
      text-decoration: underline; }
    .f-menu a.f-active {
      box-shadow: inset 3px 0 0 0 #757575; }
  .f-menu .f-menu__heading {
    padding-left: 1.5rem;
    font-weight: 700;
    font-size: .6875rem;
    text-transform: uppercase; }
    .f-menu .f-menu__heading:hover {
      color: #757575; }

/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

* {
  box-sizing: border-box; }

h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dd,
p, figure, object,
pre, table, fieldset, hr {
  margin: 0;
  margin-bottom:  24px;
  margin-bottom:  2.4rem; }

html {
  height: 100%;
  font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-size: 62.5%;
  line-height: 1;
  font-weight: 300; }

body {
  font-size:  14px;
  font-size:  1.4rem;
  line-height:  24px;
  line-height:  2.4rem;
  background: #edeced;
  color: #4a4a4a; }

pre {
  word-wrap: normal; }

::-webkit-selection {
  background-color: #ff8e25;
  color: #fff; }

::-moz-selection {
  background-color: #ff8e25;
  color: #fff; }

::selection {
  background-color: #ff8e25;
  color: #fff; }

strong {
  font-weight: 500; }

em {
  font-style: italic; }

.nowrap {
  white-space: nowrap; }

.styleguide p {
  max-width:  450px;
  max-width:  45rem; }

a {
  text-decoration: none;
  color: #26aafe;
  cursor: pointer;
  -webkit-transition: color 0.1s linear;
          transition: color 0.1s linear;
  -webkit-tap-highlight-color: transparent; }

input {
  -webkit-tap-highlight-color: transparent; }

.no-touch a:hover,
.touch a:active {
  text-decoration: none;
  color: #1e87cb; }

.no-touch .link--success:hover,
.touch .link--success:active {
  color: #65cb1c; }

.no-touch .link--destroy:hover,
.touch .link--destroy:active {
  color: #ff4a25; }

.link--disabled,
.touch .link--disabled:active,
.no-touch .link--disabled:hover {
  color: #b6b6b6;
  cursor: default; }

ul, ol {
  padding: 0;
  list-style-type: none; }

dt {
  font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif; }

h1, h2, h3, h4, h5, h6,
.h1, .sg-section__title, .h2, .h3, .sg-section__sub-title, .h4, .h5, .h6 {
  margin-bottom:  24px;
  margin-bottom:  2.4rem;
  font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-weight: 300;
  color: #4a4a4a; }
  h1
small
, h2
small
, h3
small
, h4
small
, h5
small
, h6
small
,
  .h1
small
, .sg-section__title small
, .h2
small
, .h3
small
, .sg-section__sub-title small
, .h4
small
, .h5
small
, .h6
small
{
    display: block;
    font-family: "Ubuntu", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
    font-size: 60%;
    color: #b6b6b6; }

h1, .h1, .sg-section__title {
  font-size:  34px;
  font-size:  3.4rem;
  line-height:  48px;
  line-height:  4.8rem; }

h2, .h2 {
  font-size:  27px;
  font-size:  2.7rem;
  line-height:  36px;
  line-height:  3.6rem; }

h3, .h3, .sg-section__sub-title {
  font-size:  22px;
  font-size:  2.2rem;
  line-height:  36px;
  line-height:  3.6rem; }

h4, .h4 {
  font-size:  18px;
  font-size:  1.8rem;
  line-height:  24px;
  line-height:  2.4rem; }

.text--center {
  text-align: center; }

.text--small {
  font-size:  11px;
  font-size:  1.1rem;
  line-height:  18px;
  line-height:  1.8rem; }

.less-important {
  font-size:  11px;
  font-size:  1.1rem;
  line-height: 1;
  color: #d1d1d1; }

.text--error {
  color: #ff4a25; }

.icon {
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  -webkit-transform-origin: 50%;
      -ms-transform-origin: 50%;
          transform-origin: 50%; }
  .icon:hover
[stroke^='#'] {
    stroke: #186698; }
  .icon:hover
[fill^='#'] {
    fill: #186698; }
  .icon:active {
    -webkit-transform: scale(0.85);
        -ms-transform: scale(0.85);
            transform: scale(0.85); }

.icon--destroy:hover
[stroke^='#'] {
  stroke: #ff4a25; }

.icon--destroy:hover
[fill^='#'] {
  fill: #ff4a25; }

body:not(.is-admin) .icon--is-admin-only,
body:not(.is-admin) .icon--is-admin-only:hover,
body:not(.is-admin) .icon--is-admin-only:active,
.icon--disabled,
.icon--disabled:hover,
.icon--disabled:active {
  -webkit-transform: none;
      -ms-transform: none;
          transform: none; }
  body:not(.is-admin) .icon--is-admin-only
[stroke^='#']
,
  body:not(.is-admin) .icon--is-admin-only:hover
[stroke^='#']
,
  body:not(.is-admin) .icon--is-admin-only:active
[stroke^='#']
,
  .icon--disabled
[stroke^='#']
,
  .icon--disabled:hover
[stroke^='#']
,
  .icon--disabled:active
[stroke^='#'] {
    stroke: #d1d1d1; }
  body:not(.is-admin) .icon--is-admin-only
[fill^='#']
,
  body:not(.is-admin) .icon--is-admin-only:hover
[fill^='#']
,
  body:not(.is-admin) .icon--is-admin-only:active
[fill^='#']
,
  .icon--disabled
[fill^='#']
,
  .icon--disabled:hover
[fill^='#']
,
  .icon--disabled:active
[fill^='#'] {
    fill: #d1d1d1; }

:checked + .table__actions-label
[fill^='#'] {
  fill: #186698; }

.is-admin .icon--lock {
  display: none; }

.sg-section {
  padding-top:  72px;
  padding-top:  7.2rem;
  margin-bottom:  72px;
  margin-bottom:  7.2rem; }
  @media (min-width: huge-width) {
    .sg-section {
      padding-top:  48px;
      padding-top:  4.8rem; } }

.sg-section__title {
  font-weight: 500;
  text-transform: uppercase; }

.sg-section__sub-title {
  margin-top:  72px;
  margin-top:  7.2rem;
  text-transform: uppercase;
  color: #b6b6b6;
  border-bottom: 1px solid #d1d1d1; }
  .sg-section__title + .sg-section__sub-title {
    margin-top:  48px;
    margin-top:  4.8rem; }

.sg-section__sub-section {
  margin-bottom:  12px;
  margin-bottom:  1.2rem; }

/*# sourceMappingURL=data:application/json;base64, */